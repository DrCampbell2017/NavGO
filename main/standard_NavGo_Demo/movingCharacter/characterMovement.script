local function InitMoveCharacter(self)
	--Go to node go.get_id("/NavGO_NodeGO1")
	--msg.post("/NavGO_HandlerGO#NavGO_HandlerScript", hash("generate_path"), {target = go.get_id("/NavGO_NodeGO1")})
	msg.post("/NavGO_HandlerGO#NavGO_HandlerScript", hash("generate_path_to_random_node"), {target = go.get_id("/NavGO_NodeGO1")})
end

local function move2(self)
	--msg.post("/NavGO_HandlerGO#NavGO_HandlerScript", hash("return_random_node"))
	if #self.nodesList == 0 then
		msg.post("/NavGO_HandlerGO#NavGO_HandlerScript", hash("return_all_nodes"))
	else
		local node = self.nodesList[ math.random(1,#self.nodesList) ]
		msg.post("/NavGO_HandlerGO#NavGO_HandlerScript", hash("generate_path"), {target = node})
	end
end

local function randomMoceCharacter(self, node)
	msg.post("/NavGO_HandlerGO#NavGO_HandlerScript", hash("generate_path"), {target = node})
	
end

local function allNodesGotten(self)
	move2(self)
end

------------------
--Core Functions--
------------------

function init(self)
	timer.delay(1, false, InitMoveCharacter)
	self.nodesList = {}
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.group == hash("wall") then
			local newpos = go.get_position() + message.normal * message.distance
			go.set_position(newpos)
		end

	elseif message_id == hash("random_node") then
		local randomNode = message.node
		randomMoceCharacter(self, randomNode)
		
	elseif message_id == hash("path_to_follow") then
		print("Movement - PATH HAS BEEN FOUND!")
		local delay = 0
		local path = message.path
		for i=1, #path do
			go.animate(go.get_id(), "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(path[i].x, path[i].y, 1), go.EASING_LINEAR, 1, delay)
			delay = delay + 1
		end
		timer.delay(delay, false, move2)

	elseif message_id == hash("path_not_found") then
		print("Movement - PATH HAS NOT BEEN FOUND!")

	elseif message_id == hash("all_nodes") then
		self.nodesList = message.nodes
		local randomNode = self.nodesList[ math.random(1, #self.nodesList) ]
		randomMoceCharacter(self, randomNode)

	elseif message_id == hash("nodes_fraction") then
		for i=1, #message.nodes do
			table.insert(self.nodesList, message.nodes[i])
		end

	elseif message_id == hash("add_nodes_sent") then
		allNodesGotten(self)
	end
end



