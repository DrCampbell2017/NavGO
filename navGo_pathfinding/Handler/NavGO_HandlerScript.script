require("navGo_pathfinding.multiRayCast")
require("navGo_pathfinding.Handler.a_star_core")
require("navGo_pathfinding.NavGO_Global")
require("navGo_pathfinding.Node.nodeModule")
require("navGo_pathfinding.directionalNode.directionalModule")

local function distance(vec1, vec2)
	return math.ceil( math.sqrt( math.pow(vec1.x - vec2.x, 2) + math.pow(vec1.y - vec2.y, 2) ) )
end

local function createNodeForTree(self, node, from, i)
	if i == nil then i = 1 end
	local foundConnection = false
	for k=i + 1, #self.nodes do
		if not node:inLinkedNodesList(self.nodes[k]) then
			local to = self.nodes[k]:getPosition()
			local distance = distance(from, to)
			if distance <= self.valueRange then
				--Do Raycast to see if hits anything
				local result
				if from ~= to then
					result = navgo_multiRayCast.determineIfValidConnection(from, to, self.collisions, self.numberOfRays, self.rayRadius)
				end
				if result == nil then
					--Does not hit! Is good to add
					node:addToLinkedNodesList(self.nodes[k], distance)
					self.nodes[k]:addToLinkedNodesList(node, distance)
					foundConnection = true
				end
			end
		end
	end
	if not foundConnection then
		if not node:hasConnectedNodes() then
			print("WARNING: NODE " .. tostring(node:getObjID()) .. " does not have any connections within range." )
		end
	end
	return foundConnection
end

local function createNodeTree(self)
	--Show distance between all nodes
	for i=1, #self.nodes do
		local node = self.nodes[i]
		local from = self.nodes[i]:getPosition()
		createNodeForTree(self, node, from, i)
	end
	-- post build tree handling
	self.nodePathsFound = true
	NAVGO._INIT(self.nodes, self.collisions)
	if self.init_sender ~= nil then
		msg.post(self.init_sender, "NavGO_Ready")
	end
	self.pathBuilt = true
end

local function addLateNodeToTable(self, newNode, position)
	createNodeForTree(self, newNode, position, 1)
	table.insert(self.nodes, newNode)
end

local function createDirectionalNodeTree(self)
	-- Link to eachother
	for key, value in pairs(self.directionalNodes) do
		local currentNode = value
		local indexSearchingFor = currentNode:getNextID()
		local next_node = self.directionalNodes[indexSearchingFor]
		-- brief check
		local result = physics.raycast(currentNode:getPosition(), next_node:getPosition(), self.collisions, false)
		if result ~= nil then
			--Hits something!
			print("WARNING: Path from node " .. tostring( currentNode:getObjID() ) .. " to " .. tostring( next_node:getObjID() ) .. " is obstructed." )
		end
		--Add to path
		currentNode:addToLinkedNodesList( next, 1)
	end
		
	NAVGO._INIT_DIRECTIONS_PATH(self.directionalNodes)
	if self.init_sender ~= nil then
		msg.post(self.init_sender, "NavGO_Directional_Ready")
	end
end

-----------------------------
-- Handle New Node Messages--
-----------------------------

local function new_node(self, message, sender)
	-- create new node
	local pos = go.get_position(sender)
	local newNode = navNode.New(sender, pos)
	
	if not self.pathBuilt then
		-- if path not yet built, add to list to build all at once
		if not self.nodesGotten then
			self.nodesGotten = true
			timer.delay(.05, false, createNodeTree)
		end
		table.insert(self.nodes, newNode)

	else
		-- path built, add into the path without recalculating the entire thing
		addLateNodeToTable(self, newNode, pos)
	end

	-- apply set up nodes
	if self.debug then
		msg.post(sender, hash("debug"))
	elseif self.deleteAfterGotten then
		msg.post(sender, hash("disable"))
	end
end

local function new_directional_node(self, message, sender)
	-- if in main map, then include
	if not message.Independent_path then
		new_node(self, message, sender)
	end

	if not self.directionalNodesGotten then
		self.directionalNodesGotten = true
		timer.delay(.05, false, createDirectionalNodeTree)
	end

	--Add to directional queue
	local newNodeID = message.Node_ID
	if self.directionalNodes[newNodeID] == nil then
		local pos = go.get_position(sender)
		local newNode = directional_node.New(sender, pos, newNodeID, message.Node_Next)
		self.directionalNodes[message.Node_ID] = newNode
	else
		local conflictingNodeSender = self.directionalNodes[newNodeID]:getObjID()
		error("ERROR: NODE URL " .. tostring( conflictingNodeSender ) .. " and " .. tostring(sender) .. " share the same ID of " .. tostring( newNodeID ) .. ".\nChange the ID of one to a unique ID." )
	end

	if self.debug then
		msg.post(sender, hash("debug"))
	elseif self.deleteAfterGotten then
		msg.post(sender, hash("disable"))
	end
end

-----------------
-- Remove Node --
-----------------

local function remove_node(self, sender)
	NAVGO.REMOVE_NODE(sender)
	self.nodes = NAVGO.NODE_TREE
end

------------------
--Core Functions--
------------------

function init(self)
	self.nodesGotten = false
	self.nodes = {}
	self.nodePathsFound = false
	self.init_sender = nil

	--Path built
	self.pathBuilt = false

	--Directional Nodes
	self.directionalNodesGotten = false
	self.directionalNodes = {}
	
	--User Set Values
	self.valueRange = 500
	self.collisions = {}

	--Debug
	self.debug = false
	self.deleteAfterGotten = false
	self.active = false

	--ray cast settings
	self.numberOfRays = 1
	self.rayRadius = 32
end

function update(self, dt)
	if self.nodePathsFound and self.debug and self.active then
		self.nodes = NAVGO.NODE_TREE
		for i=1, #self.nodes do
			local innerList = self.nodes[i]:getLinkedNodeList()
			local from = self.nodes[i]:getPosition()
			for k, v in pairs(innerList) do
				local to = k:getPosition()
				if self.numberOfRays <= 1 then
					-- show only 1
					msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(1,0,0,1) })
				elseif self.numberOfRays == 2 then
					-- show 2
					local points = navgo_multiRayCast.generatePointsToCheck(from, to, self.rayRadius)
					navgo_multiRayCast.update_drawLineToPoints(points)
				else
					-- assume 3
					local points = navgo_multiRayCast.generatePointsToCheck(from, to, self.rayRadius)
					local point = { from=from, to=to }
					table.insert(points, point)
					navgo_multiRayCast.update_drawLineToPoints(points)
				end
			end
		end
		for key, value in pairs(self.directionalNodes) do
			local from = value:getPosition()
			local to = self.directionalNodes[value:getNextID()]:getPosition()
			msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(0,0,1,1) })
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("new_node") then
		new_node(self, message, sender)

	elseif message_id == hash("remove_node") then
		remove_node(self, sender)
		
	elseif message_id == hash("new_directional_node") then
		new_directional_node(self, message, sender)
		
	elseif message_id == hash("return_all_nodes") then
		if self.active then
			self.nodes = NAVGO.NODE_TREE
			local nodes = {}
			for i=1, #self.nodes do
				local url = self.nodes[i]:getObjID()
				table.insert(nodes, url)
			end
			if #nodes >= 50 then
				local newNodes = {}
				for i=1,#nodes do
					table.insert(newNodes, nodes[i])
					if i%50 == 0 then
						msg.post(sender, hash("nodes_fraction"), { nodes = newNodes } )
						newNodes = {}
					end
				end
				msg.post(sender, hash("add_nodes_sent"))
			else
				msg.post(sender, hash("all_nodes"), { nodes = nodes } )
			end
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end
	elseif message_id == hash("return_random_node") then
		if self.active then
			self.nodes = NAVGO.NODE_TREE
			local randomNode = self.nodes[math.random(1, #self.nodes)]
			local randomURL = randomNode:getObjID()
			msg.post(sender, hash("random_node"), { node = randomURL } )
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end

	elseif message_id == hash("generate_path") then
		--Check if to point exists on path
		if self.active then
			self.nodes = NAVGO.NODE_TREE
			local exists = A_STAR.findNodeWithID(self.nodes, message.target)
			assert(exists, "ERROR: Target node must exist on the path.")
			--Do Path
			local fromGO = sender
			local to = message.target
			local path, found = A_STAR.A_Star(self.nodes, self.collisions, fromGO, to)
			if found then
				local action = {}
				action.path = path
				msg.post(sender, hash("path_to_follow"), action)
			else
				msg.post(sender, hash("path_not_found"))
			end
			
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end

	elseif message_id == hash("generate_path_to_random_node") then
		if self.active then
			--Do Path
			self.nodes = NAVGO.NODE_TREE
			local fromGO = sender
			local senderPosition = go.get_position(sender)
			local to = self.nodes[math.random(1,#self.nodes)]:getObjID()
			local path, found = A_STAR.A_Star(self.nodes, self.collisions, fromGO, to)
			if found then
				local action = {}
				action.path = path
				msg.post(sender, hash("path_to_follow"), action)
			else
				msg.post(sender, hash("path_not_found"))
			end
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end
		
	elseif message_id == hash("debug") then
		if self.active then
			self.nodes = NAVGO.NODE_TREE
			self.debug = true
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("debug"))
			end
			for key, value in pairs(self.directionalNodes) do
				local id = value:getObjID()
				msg.post(id, hash("debug"))
			end
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end

	elseif message_id == hash("final") then
		--Use for clearning everything to reset before used again
		print("NavGO is finished!")
		self.active = false
		self.nodesGotten = false
		self.nodes = {}
		self.nodePathsFound = false

		--User Set Values
		self.valueRange = 500
		self.collisions = {}

		--Debug
		self.debug = false
		self.deleteAfterGotten = false
		NAVGO._FINAL()

	elseif message_id == hash("init") then
		self.init_sender = sender
		self.active = true
		assert(message.collisions, "Collisions must be provided to use the init statement.")
		self.collisions = message.collisions
		
		if message.nodeNeighborRange then
			assert(message.nodeNeighborRange > 0, "Node Neighnor Range must be greater then zero.")
			self.valueRange = message.nodeNeighborRange
		else
			self.valueRange = 500
		end

		--------------------------
		-- Ray Casting Settings --
		--------------------------

		if message.numberOfRays ~= nil then
			self.numberOfRays = message.numberOfRays
			NAVGO.SET_NUMBER_OF_RAYS( message.numberOfRays )
			self.rayRadius = 32
			if message.raduis ~= nil then
				self.rayRadius = message.raduis
				NAVGO.SET_DISTANCE_BETWEEN_RAYS( message.raduis )
			end
			-- redraw existing path if needed
			if self.pathBuilt then
				msg.post("#", hash("redraw_path"))
			end
		end
		
		---------
		--Debug--
		---------
		if message.debug then
			self.debug = true
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("debug"))
			end
			for key, value in pairs(self.directionalNodes) do
				local id = value:getObjID()
				msg.post(id, hash("debug"))
			end
		else
			self.debug = false
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("hide"))
			end
			for key, value in pairs(self.directionalNodes) do
				local id = value:getObjID()
				msg.post(id, hash("hide"))
			end
		end
		-----------------------
		--Delete after gotten--
		-----------------------
		if message.deleteNodeAfterGotten then
			self.deleteAfterGotten = message.deleteNodeAfterGotten
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("hide"))
				msg.post(id, hash("disable"))
			end
			for key, value in pairs(self.directionalNodes) do
				local id = value:getObjID()
				msg.post(id, hash("hide"))
				msg.post(id, hash("disable"))
			end
		else
			self.deleteAfterGotten = false
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("enable"))
			end
			for key, value in pairs(self.directionalNodes) do
				local id = value:getObjID()
				msg.post(id, hash("enable"))
			end
		end
			
	elseif message_id == hash("redraw_path") then
		if self.active then
			self.pathBuilt = false
			self.nodes = NAVGO.NODE_TREE
			if self.deleteAfterGotten then
				for i=1, #self.nodes do
					local id = self.nodes[i]:getObjID()
					msg.post(id, hash("enable"))
					self.nodes[i]:clearLinkedList()
				end
			end
			createNodeTree(self)
			if self.deleteAfterGotten then
				for i=1, #self.nodes do
					local id = self.nodes[i]:getObjID()
					msg.post(id, hash("disable"))
				end
			end

			--Directional nodes
			for key, value in pairs(self.directionalNodes) do
				local id = value:getObjID()
				msg.post(id, hash("enable"))
				value:clearLinkedList()
			end
			createDirectionalNodeTree(self)
			if self.deleteAfterGotten then
				for key, value in pairs(self.directionalNodes) do
					local id = value:getObjID()
					msg.post(id, hash("disable"))
				end
			end
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end
	end
end















