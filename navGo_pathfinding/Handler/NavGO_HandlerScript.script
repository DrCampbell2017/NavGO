require("navGo_pathfinding.Handler.a_star_core")
require("navGo_pathfinding.NavGO_Global")
require("navGo_pathfinding.Node.nodeModule")

local function distance(vec1, vec2)
	return math.ceil( math.sqrt( math.pow(vec1.x - vec2.x, 2) + math.pow(vec1.y - vec2.y, 2) ) )
end

local function createNodeTree(self)
	--Show distance between all nodes
	for i=1, #self.nodes do
		local from = self.nodes[i]:getPosition()
		local foundConnection = false
		for k=i + 1, #self.nodes do
			if not self.nodes[i]:inLinkedNodesList(self.nodes[k]) then
				local to = self.nodes[k]:getPosition()
				local distance = distance(from, to)
				if distance <= self.valueRange then
					--Do Raycast to see if hits anything
					local result
					if from ~= to then
						result = physics.raycast(from, to, self.collisions, false)
					end
					if result == nil then
						--Does not hit! Is good to add
						self.nodes[i]:addToLinkedNodesList(self.nodes[k], distance)
						self.nodes[k]:addToLinkedNodesList(self.nodes[i], distance)
						foundConnection = true
					end
				end
			end
		end
		if not foundConnection then
			if not self.nodes[i]:hasConnectedNodes() then
				print("WARNING: NODE " .. tostring(self.nodes[i]:getObjID()) .. " does not have any connections within range." )
			end
		end
	end
	self.nodePathsFound = true
	NAVGO._INIT(self.nodes, self.collisions)
	if self.init_sender ~= nil then
		msg.post(self.init_sender, "NavGO_Ready")
		self.init_sender = nil
	end
end

------------------
--Core Functions--
------------------

function init(self)
	self.nodesGotten = false
	self.nodes = {}
	self.nodePathsFound = false
	self.init_sender = nil

	--User Set Values
	self.valueRange = 500
	self.collisions = {}

	--Debug
	self.debug = false
	self.deleteAfterGotten = false
	self.active = false
end

function update(self, dt)
	if self.nodePathsFound and self.debug and self.active then
		for i=1, #self.nodes do
			local innerList = self.nodes[i]:getLinkedNodeList()
			local from = self.nodes[i]:getPosition()
			for k, v in pairs(innerList) do
				local to = k:getPosition()
				msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(1,0,0,1) })
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("new_node") then
		if not self.nodesGotten then
			self.nodesGotten = true
			timer.delay(.05, false, createNodeTree)
		end
		local pos = go.get_position(sender)
		local newNode = navNode.New(sender, pos)
		table.insert(self.nodes, newNode)
		if self.debug then
			msg.post(sender, hash("debug"))
		elseif self.deleteAfterGotten then
			msg.post(sender, hash("disable"))
		end
	elseif message_id == hash("return_all_nodes") then
		if self.active then
			local nodes = {}
			for i=1, #self.nodes do
				local url = self.nodes[i]:getObjID()
				table.insert(nodes, url)
			end
			if #nodes >= 50 then
				local newNodes = {}
				for i=1,#nodes do
					table.insert(newNodes, nodes[i])
					if i%50 == 0 then
						msg.post(sender, hash("nodes_fraction"), { nodes = newNodes } )
						newNodes = {}
					end
				end
				msg.post(sender, hash("add_nodes_sent"))
			else
				msg.post(sender, hash("all_nodes"), { nodes = nodes } )
			end
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end
	elseif message_id == hash("return_random_node") then
		if self.active then
			local randomNode = self.nodes[math.random(1, #self.nodes)]
			local randomURL = randomNode:getObjID()
			msg.post(sender, hash("random_node"), { node = randomURL } )
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end

	elseif message_id == hash("generate_path") then
		--Check if to point exists on path
		if self.active then
			local exists = A_STAR.findNodeWithID(self.nodes, message.target)
			assert(exists, "ERROR: Target node must exist on the path.")
			--Do Path
			local fromGO = sender
			local to = message.target
			local path = A_STAR.A_Star(self.nodes, self.collisions, fromGO, to)
			local action = {}
			action.path = path
			msg.post(sender, hash("path_to_follow"), action)
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end

	elseif message_id == hash("generate_path_to_random_node") then
		if self.active then
			--Do Path
			local fromGO = sender
			local senderPosition = go.get_position(sender)
			local to = self.nodes[math.random(1,#self.nodes)]:getObjID()
			local path = A_STAR.A_Star(self.nodes, self.collisions, fromGO, to)
			local action = {}
			action.path = path
			msg.post(sender, hash("path_to_follow"), action)
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end
		
	elseif message_id == hash("debug") then
		if self.active then
			self.debug = true
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("debug"))
			end
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end

	elseif message_id == hash("final") then
		--Use for clearning everything to reset before used again
		print("NavGO is finished!")
		self.active = false
		self.nodesGotten = false
		self.nodes = {}
		self.nodePathsFound = false

		--User Set Values
		self.valueRange = 500
		self.collisions = {}

		--Debug
		self.debug = false
		self.deleteAfterGotten = false
		NAVGO._FINAL()

	elseif message_id == hash("init") then
		self.init_sender = sender
		self.active = true
		assert(message.collisions, "Collisions must be provided to use the init statement.")
		self.collisions = message.collisions
		
		if message.nodeNeighborRange then
			assert(message.nodeNeighborRange > 0, "Node Neighnor Range must be greater then zero.")
			self.valueRange = message.nodeNeighborRange
		else
			self.valueRange = 500
		end
		---------
		--Debug--
		---------
		if message.debug then
			self.debug = true
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("debug"))
			end
		else
			self.debug = false
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("hide"))
			end
		end
		-----------------------
		--Delete after gotten--
		-----------------------
		if message.deleteNodeAfterGotten then
			self.deleteAfterGotten = message.deleteNodeAfterGotten
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("hide"))
				msg.post(id, hash("disable"))
			end
		else
			self.deleteAfterGotten = false
			for i=1, #self.nodes do
				local id = self.nodes[i]:getObjID()
				msg.post(id, hash("enable"))
			end
		end
			
	elseif message_id == hash("redraw_path") then
		if self.active then
			if self.deleteAfterGotten then
				for i=1, #self.nodes do
					local id = self.nodes[i]:getObjID()
					msg.post(id, hash("enable"))
				end
			end
			for i=1, #self.nodes do
				self.nodes[i]:clearLinkedList()
			end
			createNodeTree(self)
			if self.deleteAfterGotten then
				for i=1, #self.nodes do
					local id = self.nodes[i]:getObjID()
					msg.post(id, hash("disable"))
				end
			end
		else
			print("WARNING: " .. tostring( sender ) .. " attempted to call a function in the NavGO handler before initializing the handler.")
		end
	end
end















